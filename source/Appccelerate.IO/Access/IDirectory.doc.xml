<?xml version="1.0" encoding="utf-8" ?>
<doc>
  <members>
    <member name="T:System.IO.Directory">
      <summary>Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Directory.CreateDirectory(System.String)">
      <summary>
        Creates all directories and subdirectories as specified by <paramref name="path" />.
      </summary>
      <returns>
        A <see cref="T:System.IO.DirectoryInfo" /> as specified by <paramref name="path" />.
      </returns>
      <param name="path">The directory path to create. </param>
      <exception cref="T:System.IO.IOException">
        The directory specified by <paramref name="path" /> is a file.-or-The network name was not found.
      </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.-or-<paramref name="path" /> is prefixed with, or contains only a colon character (:).
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> contains a colon character (:) that is not part of a drive label ("C:\").
      </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
      <summary>Creates all the directories in the specified path, applying the specified Windows security.</summary>
      <returns>
        A <see cref="T:System.IO.DirectoryInfo" /> object representing the newly created directory.
      </returns>
      <param name="path">The directory to create.</param>
      <param name="directorySecurity">The access control to apply to the directory.</param>
      <exception cref="T:System.IO.IOException">
        The directory specified by <paramref name="path" /> is a file.-or-The network name is not known.
      </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. -or-<paramref name="path" /> is prefixed with, or contains only a colon character (:).
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> contains a colon character (:) that is not part of a drive label ("C:\").
      </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.Delete(System.String)">
      <summary>Deletes an empty directory from a specified path.</summary>
      <param name="path">The name of the empty directory to remove. This directory must be writable or empty. </param>
      <exception cref="T:System.IO.IOException">
        A file with the same name and location specified by <paramref name="path" /> exists.-or-The directory is the application's current working directory.-or-The directory specified by <paramref name="path" /> is not empty.-or-The directory is read-only or contains a read-only file.-or-The directory is being used by another process..
      </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> does not exist or could not be found.-or-<paramref name="path" /> refers to a file instead of a directory.-or-The specified path is invalid (for example, it is on an unmapped drive).
      </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.Delete(System.String,System.Boolean)">
      <summary>Deletes an empty directory and, if indicated, any subdirectories and files in the directory.  </summary>
      <param name="path">The name of the directory to remove. </param>
      <param name="recursive">
        true to remove directories, subdirectories, and files in <paramref name="path" />; otherwise, false.
      </param>
      <exception cref="T:System.IO.IOException">
        A file with the same name and location specified by <paramref name="path" /> exists.-or-The directory specified by <paramref name="path" /> is read-only, or <paramref name="recursive" /> is false and <paramref name="path" /> is not an empty directory. -or-The directory is the application's current working directory. -or-The directory contains a read-only file.-or-The directory is being used by another process.
      </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> does not exist or could not be found.-or-<paramref name="path" /> refers to a file instead of a directory.-or-The specified path is invalid (for example, it is on an unmapped drive).
      </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.Exists(System.String)">
      <summary>Determines whether the given path refers to an existing directory on disk.</summary>
      <returns>
        true if <paramref name="path" /> refers to an existing directory; otherwise, false.
      </returns>
      <param name="path">The path to test. </param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.GetAccessControl(System.String)">
      <summary>
        Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity" /> object that encapsulates the access control list (ACL) entries for a specified directory.
      </summary>
      <returns>
        A <see cref="T:System.Security.AccessControl.DirectorySecurity" /> object that encapsulates the access control rules for the file described by the <paramref name="path" /> parameter.
      </returns>
      <param name="path">
        The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity" /> object that describes the file's access control list (ACL) information.
      </param>
      <exception cref="T:System.ArgumentNullException">
        The <paramref name="path" /> parameter is null.
      </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
      <exception cref="T:System.SystemException">The directory could not be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        The <paramref name="path" /> parameter specified a directory that is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.
      </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
      <summary>
        Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity" /> object that encapsulates the specified type of access control list (ACL) entries for a specified directory.
      </summary>
      <returns>
        A <see cref="T:System.Security.AccessControl.DirectorySecurity" /> object that encapsulates the access control rules for the file described by the <paramref name="path" /> parameter.
      </returns>
      <param name="path">
        The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity" /> object that describes the file's access control list (ACL) information.
      </param>
      <param name="includeSections">
        One of the <see cref="T:System.Security.AccessControl.AccessControlSections" /> values that specifies the type of access control list (ACL) information to receive.
      </param>
      <exception cref="T:System.ArgumentNullException">
        The <paramref name="path" /> parameter is null.
      </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
      <exception cref="T:System.SystemException">The directory could not be found.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        The <paramref name="path" /> parameter specified a directory that is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.
      </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.GetCreationTime(System.String)">
      <summary>Gets the creation date and time of a directory.</summary>
      <returns>
        A <see cref="T:System.DateTime" /> structure set to the creation date and time for the specified directory. This value is expressed in local time.
      </returns>
      <param name="path">The path of the directory. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.GetCreationTimeUtc(System.String)">
      <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.</summary>
      <returns>
        A <see cref="T:System.DateTime" /> structure set to the creation date and time for the specified directory. This value is expressed in UTC time.
      </returns>
      <param name="path">The path of the directory. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.GetCurrentDirectory">
      <summary>Gets the current working directory of the application.</summary>
      <returns>A string that contains the path of the current working directory, and does not end with a backslash ("\").</returns>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">The operating system is Windows CE, which does not have current directory functionality.This method is available in the .NET Compact Framework, but is not currently supported.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.GetDirectories(System.String)">
      <summary>Gets the names of subdirectories in the specified directory.</summary>
      <returns>
        An array of type String containing the names of subdirectories in <paramref name="path" />.
      </returns>
      <param name="path">The path for which an array of subdirectory names is returned. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> is a file name.
      </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.GetDirectories(System.String,System.String)">
      <summary>Gets an array of directories matching the specified search pattern from the current directory.</summary>
      <returns>A String array of directories matching the search pattern.</returns>
      <param name="path">The path to search. </param>
      <param name="searchPattern">
        The search string to match against the names of files in <paramref name="path" />. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar" />, nor can it contain any of the characters in <see cref="F:System.IO.Path.InvalidPathChars" />.
      </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.-or- <paramref name="searchPattern" /> does not contain a valid pattern.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> or <paramref name="searchPattern" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> is a file name.
      </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
      <summary>Gets an array of directories matching the specified search pattern from the current directory, using a value to determine whether to search subdirectories.</summary>
      <returns>A String array of directories matching the search pattern.</returns>
      <param name="path">The path to search. </param>
      <param name="searchPattern">
        The search string to match against the names of files in <paramref name="path" />. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar" />, nor can it contain any of the characters in <see cref="F:System.IO.Path.InvalidPathChars" />.
      </param>
      <param name="searchOption">
        One of the <see cref="T:System.IO.SearchOption" /> values that specifies whether the search operation should include all subdirectories or only the current directory.
      </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.-or- <paramref name="searchPattern" /> does not contain a valid pattern.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> or <paramref name="searchPattern" /> is null.
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.
      </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> is a file name.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    </member>
    <member name="M:System.IO.Directory.GetDirectoryRoot(System.String)">
      <summary>Returns the volume information, root information, or both for the specified path.</summary>
      <returns>A string containing the volume information, root information, or both for the specified path.</returns>
      <param name="path">The path of a file or directory. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.GetFiles(System.String)">
      <summary>Returns the names of files (including their paths) in the specified directory.</summary>
      <returns>A String array of file names in the specified directory. File names include the full path.</returns>
      <param name="path">The directory from which to retrieve the files. </param>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> is a file name.-or-A network error has occurred.
      </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.GetFiles(System.String,System.String)">
      <summary>Returns the names of files (including their paths) in the specified directory that match the specified search pattern.</summary>
      <returns>A String array containing the names of files in the specified directory that match the specified search pattern. File names include the full path.</returns>
      <param name="path">The directory to search. </param>
      <param name="searchPattern">
        The search string to match against the names of files in <paramref name="path" />. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar" />, nor can it contain any of the characters in <see cref="F:System.IO.Path.InvalidPathChars" />.
      </param>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> is a file name.-or-A network error has occurred.
      </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.-or- <paramref name="searchPattern" /> does not contain a valid pattern.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> or <paramref name="searchPattern" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)">
      <summary>Returns the names of files (including their paths) in the specified directory that match the specified search pattern, using a value to determine whether to search subdirectories.</summary>
      <returns>A String array containing the names of files in the specified directory that match the specified search pattern. File names include the full path.</returns>
      <param name="path">The directory to search. </param>
      <param name="searchPattern">
        The search string to match against the names of files in <paramref name="path" />. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar" />, nor can it contain any of the characters in <see cref="F:System.IO.Path.InvalidPathChars" />.
      </param>
      <param name="searchOption">
        One of the <see cref="T:System.IO.SearchOption" /> values that specifies whether the search operation should include all subdirectories or only the current directory.
      </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. -or- <paramref name="searchPattern" /> does not contain a valid pattern.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> or <paramref name="searchPattern" /> is null.
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.
      </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> is a file name.-or-A network error has occurred.
      </exception>
    </member>
    <member name="M:System.IO.Directory.GetFileSystemEntries(System.String)">
      <summary>Returns the names of all files and subdirectories in the specified directory.</summary>
      <returns>A String array containing the names of file system entries in the specified directory.</returns>
      <param name="path">The directory for which file and subdirectory names are returned. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> is a file name.
      </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String)">
      <summary>Returns an array of file system entries matching the specified search criteria.</summary>
      <returns>A String array of file system entries matching the search criteria.</returns>
      <param name="path">The path to be searched. </param>
      <param name="searchPattern">
        The search string to match against the names of files in <paramref name="path" />. The <paramref name="searchPattern" /> parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar" />, nor can it contain any of the characters in <see cref="F:System.IO.Path.InvalidPathChars" />.
      </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.-or- <paramref name="searchPattern" /> does not contain a valid pattern.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> or <paramref name="searchPattern" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> is a file name.
      </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.GetLastAccessTime(System.String)">
      <summary>Returns the date and time the specified file or directory was last accessed.</summary>
      <returns>
        A <see cref="T:System.DateTime" /> structure set to the date and time the specified file or directory was last accessed. This value is expressed in local time.
      </returns>
      <param name="path">The file or directory for which to obtain access date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        The <paramref name="path" /> parameter is in an invalid format.
      </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.GetLastAccessTimeUtc(System.String)">
      <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary>
      <returns>
        A <see cref="T:System.DateTime" /> structure set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time.
      </returns>
      <param name="path">The file or directory for which to obtain access date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        The <paramref name="path" /> parameter is in an invalid format.
      </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.GetLastWriteTime(System.String)">
      <summary>Returns the date and time the specified file or directory was last written to.</summary>
      <returns>
        A <see cref="T:System.DateTime" /> structure set to the date and time the specified file or directory was last written to. This value is expressed in local time.
      </returns>
      <param name="path">The file or directory for which to obtain modification date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.GetLastWriteTimeUtc(System.String)">
      <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to.</summary>
      <returns>
        A <see cref="T:System.DateTime" /> structure set to the date and time the specified file or directory was last written to. This value is expressed in UTC time.
      </returns>
      <param name="path">The file or directory for which to obtain modification date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.GetLogicalDrives">
      <summary>Retrieves the names of the logical drives on this computer in the form "&lt;drive letter&gt;:\".</summary>
      <returns>The logical drives on this computer.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occured (for example, a disk error). </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.GetParent(System.String)">
      <summary>Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary>
      <returns>
        The parent directory, or null if <paramref name="path" /> is the root directory, including the root of a UNC server or share name.
      </returns>
      <param name="path">The path for which to retrieve the parent directory. </param>
      <exception cref="T:System.IO.IOException">
        The directory specified by <paramref name="path" /> is read-only.
      </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path was not found. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.Move(System.String,System.String)">
      <summary>Moves a file or a directory and its contents to a new location.</summary>
      <param name="sourceDirName">The path of the file or directory to move. </param>
      <param name="destDirName">
        The path to the new location for <paramref name="sourceDirName" />. If <paramref name="sourceDirName" /> is a file, then <paramref name="destDirName" /> must also be a file name.
      </param>
      <exception cref="T:System.IO.IOException">
        An attempt was made to move a directory to a different volume. -or- <paramref name="destDirName" /> already exists. -or- The <paramref name="sourceDirName" /> and <paramref name="destDirName" /> parameters refer to the same file or directory.
      </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceDirName" /> or <paramref name="destDirName" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirName" /> or <paramref name="destDirName" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        The path specified by <paramref name="sourceDirName" /> is invalid (for example, it is on an unmapped drive).
      </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
      <summary>
        Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity" /> object to the specified directory.
      </summary>
      <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
      <param name="directorySecurity">
        A <see cref="T:System.Security.AccessControl.DirectorySecurity" /> object that describes an ACL entry to apply to the directory described by the <paramref name="path" /> parameter.
      </param>
      <exception cref="T:System.ArgumentNullException">
        The <paramref name="directorySecurity" /> parameter is null.
      </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory could not be found.</exception>
      <exception cref="T:System.ArgumentException">
        The <paramref name="path" /> was invalid.
      </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        The current process does not have access to the directory specified by <paramref name="path" />.-or-The current process does not have sufficient privilege to set the ACL entry.
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.SetCreationTime(System.String,System.DateTime)">
      <summary>Sets the creation date and time for the specified file or directory.</summary>
      <param name="path">The file or directory for which to set the creation date and time information. </param>
      <param name="creationTime">
        A <see cref="T:System.DateTime" /> containing the value to set for the creation date and time of <paramref name="path" />. This value is expressed in local time.
      </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationTime" /> specifies a value outside the range of dates or times permitted for this operation.
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)">
      <summary>Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory.</summary>
      <param name="path">The file or directory for which to set the creation date and time information. </param>
      <param name="creationTimeUtc">
        A <see cref="T:System.DateTime" /> containing the value to set for the creation date and time of <paramref name="path" />. This value is expressed in UTC time.
      </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationTimeUtc" /> specifies a value outside the range of dates or times permitted for this operation.
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.SetCurrentDirectory(System.String)">
      <summary>Sets the application's current working directory to the specified directory.</summary>
      <param name="path">The path to which the current working directory is set. </param>
      <exception cref="T:System.IO.IOException">An IO error occurred. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access unmanaged code. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory was not found.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)">
      <summary>Sets the date and time the specified file or directory was last accessed.</summary>
      <param name="path">The file or directory for which to set the access date and time information. </param>
      <param name="lastAccessTime">
        A <see cref="T:System.DateTime" /> containing the value to set for the access date and time of <paramref name="path" />. This value is expressed in local time.
      </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastAccessTime" /> specifies a value outside the range of dates or times permitted for this operation.
      </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)">
      <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary>
      <param name="path">The file or directory for which to set the access date and time information. </param>
      <param name="lastAccessTimeUtc">
        A <see cref="T:System.DateTime" /> containing the value to set for the access date and time of <paramref name="path" />. This value is expressed in UTC time.
      </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastAccessTimeUtc" /> specifies a value outside the range of dates or times permitted for this operation.
      </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)">
      <summary>Sets the date and time a directory was last written to.</summary>
      <param name="path">The path of the directory. </param>
      <param name="lastWriteTime">The date and time the directory was last written to. This value is expressed in local time. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastWriteTime" /> specifies a value outside the range of dates or times permitted for this operation.
      </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)">
      <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to.</summary>
      <param name="path">The path of the directory. </param>
      <param name="lastWriteTimeUtc">The date and time the directory was last written to. This value is expressed in UTC time. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.
      </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastWriteTimeUtc" /> specifies a value outside the range of dates or times permitted for this operation.
      </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
  </members>
</doc>